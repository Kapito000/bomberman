//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Code/Gameplay/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Gameplay.Input
{
    public partial class @Controls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""aa0d1b77-da2b-498a-91e4-59ead4c55946"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b4110c98-755a-49be-a5f0-56cadc9b718c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScreenTap"",
                    ""type"": ""Button"",
                    ""id"": ""a5070ea3-670a-474f-9b09-25a0a5bfe71d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""c25c4f99-c86a-4e46-b3cb-98ab7ff48233"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PutUsualBomb"",
                    ""type"": ""Button"",
                    ""id"": ""def07521-90ba-44d0-98cb-5122cb5515d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PutBigBomb"",
                    ""type"": ""Button"",
                    ""id"": ""88873704-0777-493b-b319-c1853812ecba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PutHunterBomb"",
                    ""type"": ""Button"",
                    ""id"": ""91650cc9-7a6f-4609-b50f-641b480384d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PutRemoteDetonationBomb"",
                    ""type"": ""Button"",
                    ""id"": ""cefe6177-7c45-4e57-92c8-f450ed679d48"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""97be136a-18f2-4774-80ac-2a00c8f24eb3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f0c8c480-74ba-49a6-9fe8-1311724b3c04"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7eaafdf0-3485-4da9-a1da-f260105c5d50"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""36cf760b-845b-4bb2-a7b8-3b21cfd4b932"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1c4b81b0-c47a-4420-a538-c0f00981ae94"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""9f4045a1-49a5-4a73-844f-e163cb225570"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c56aebaa-31db-4848-8594-d4493455c569"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f09c18ca-11b5-4973-aa54-a693f4c24b47"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fe9ef0e6-d38d-4c92-aa08-72b5e677c3ae"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""62d61e3d-1dbf-464e-b34d-b241bb8045bc"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2b1b9cd8-54c4-4468-91dc-ff63b027e9af"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Modile"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""541d71e1-cda4-4248-8685-dd9b77f8209a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ScreenTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3587b0b-a4d8-4197-86a5-31cca4038949"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Modile"",
                    ""action"": ""ScreenTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01653368-ab32-485b-821a-4dcc130874ea"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6086685-049a-4b09-87c4-b372d73e12cb"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Modile"",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36aa1905-9677-4cf1-8c65-c3abe50e2bea"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""PutUsualBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7704dc04-f384-4d2c-93eb-df817e505280"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""PutBigBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""807eae9f-c315-4070-8dc5-d9dd6bb4df72"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""PutHunterBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c72e4f2f-9e04-4ee3-b0e8-b5961d5d4b57"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""PutRemoteDetonationBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Modile"",
            ""bindingGroup"": ""Modile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Character
            m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
            m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
            m_Character_ScreenTap = m_Character.FindAction("ScreenTap", throwIfNotFound: true);
            m_Character_MousePos = m_Character.FindAction("MousePos", throwIfNotFound: true);
            m_Character_PutUsualBomb = m_Character.FindAction("PutUsualBomb", throwIfNotFound: true);
            m_Character_PutBigBomb = m_Character.FindAction("PutBigBomb", throwIfNotFound: true);
            m_Character_PutHunterBomb = m_Character.FindAction("PutHunterBomb", throwIfNotFound: true);
            m_Character_PutRemoteDetonationBomb = m_Character.FindAction("PutRemoteDetonationBomb", throwIfNotFound: true);
        }

        ~@Controls()
        {
            UnityEngine.Debug.Assert(!m_Character.enabled, "This will cause a leak and performance issues, Controls.Character.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character
        private readonly InputActionMap m_Character;
        private List<ICharacterActions> m_CharacterActionsCallbackInterfaces = new List<ICharacterActions>();
        private readonly InputAction m_Character_Movement;
        private readonly InputAction m_Character_ScreenTap;
        private readonly InputAction m_Character_MousePos;
        private readonly InputAction m_Character_PutUsualBomb;
        private readonly InputAction m_Character_PutBigBomb;
        private readonly InputAction m_Character_PutHunterBomb;
        private readonly InputAction m_Character_PutRemoteDetonationBomb;
        public struct CharacterActions
        {
            private @Controls m_Wrapper;
            public CharacterActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Character_Movement;
            public InputAction @ScreenTap => m_Wrapper.m_Character_ScreenTap;
            public InputAction @MousePos => m_Wrapper.m_Character_MousePos;
            public InputAction @PutUsualBomb => m_Wrapper.m_Character_PutUsualBomb;
            public InputAction @PutBigBomb => m_Wrapper.m_Character_PutBigBomb;
            public InputAction @PutHunterBomb => m_Wrapper.m_Character_PutHunterBomb;
            public InputAction @PutRemoteDetonationBomb => m_Wrapper.m_Character_PutRemoteDetonationBomb;
            public InputActionMap Get() { return m_Wrapper.m_Character; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
            public void AddCallbacks(ICharacterActions instance)
            {
                if (instance == null || m_Wrapper.m_CharacterActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CharacterActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @ScreenTap.started += instance.OnScreenTap;
                @ScreenTap.performed += instance.OnScreenTap;
                @ScreenTap.canceled += instance.OnScreenTap;
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
                @PutUsualBomb.started += instance.OnPutUsualBomb;
                @PutUsualBomb.performed += instance.OnPutUsualBomb;
                @PutUsualBomb.canceled += instance.OnPutUsualBomb;
                @PutBigBomb.started += instance.OnPutBigBomb;
                @PutBigBomb.performed += instance.OnPutBigBomb;
                @PutBigBomb.canceled += instance.OnPutBigBomb;
                @PutHunterBomb.started += instance.OnPutHunterBomb;
                @PutHunterBomb.performed += instance.OnPutHunterBomb;
                @PutHunterBomb.canceled += instance.OnPutHunterBomb;
                @PutRemoteDetonationBomb.started += instance.OnPutRemoteDetonationBomb;
                @PutRemoteDetonationBomb.performed += instance.OnPutRemoteDetonationBomb;
                @PutRemoteDetonationBomb.canceled += instance.OnPutRemoteDetonationBomb;
            }

            private void UnregisterCallbacks(ICharacterActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @ScreenTap.started -= instance.OnScreenTap;
                @ScreenTap.performed -= instance.OnScreenTap;
                @ScreenTap.canceled -= instance.OnScreenTap;
                @MousePos.started -= instance.OnMousePos;
                @MousePos.performed -= instance.OnMousePos;
                @MousePos.canceled -= instance.OnMousePos;
                @PutUsualBomb.started -= instance.OnPutUsualBomb;
                @PutUsualBomb.performed -= instance.OnPutUsualBomb;
                @PutUsualBomb.canceled -= instance.OnPutUsualBomb;
                @PutBigBomb.started -= instance.OnPutBigBomb;
                @PutBigBomb.performed -= instance.OnPutBigBomb;
                @PutBigBomb.canceled -= instance.OnPutBigBomb;
                @PutHunterBomb.started -= instance.OnPutHunterBomb;
                @PutHunterBomb.performed -= instance.OnPutHunterBomb;
                @PutHunterBomb.canceled -= instance.OnPutHunterBomb;
                @PutRemoteDetonationBomb.started -= instance.OnPutRemoteDetonationBomb;
                @PutRemoteDetonationBomb.performed -= instance.OnPutRemoteDetonationBomb;
                @PutRemoteDetonationBomb.canceled -= instance.OnPutRemoteDetonationBomb;
            }

            public void RemoveCallbacks(ICharacterActions instance)
            {
                if (m_Wrapper.m_CharacterActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICharacterActions instance)
            {
                foreach (var item in m_Wrapper.m_CharacterActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CharacterActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CharacterActions @Character => new CharacterActions(this);
        private int m_PCSchemeIndex = -1;
        public InputControlScheme PCScheme
        {
            get
            {
                if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
                return asset.controlSchemes[m_PCSchemeIndex];
            }
        }
        private int m_ModileSchemeIndex = -1;
        public InputControlScheme ModileScheme
        {
            get
            {
                if (m_ModileSchemeIndex == -1) m_ModileSchemeIndex = asset.FindControlSchemeIndex("Modile");
                return asset.controlSchemes[m_ModileSchemeIndex];
            }
        }
        public interface ICharacterActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnScreenTap(InputAction.CallbackContext context);
            void OnMousePos(InputAction.CallbackContext context);
            void OnPutUsualBomb(InputAction.CallbackContext context);
            void OnPutBigBomb(InputAction.CallbackContext context);
            void OnPutHunterBomb(InputAction.CallbackContext context);
            void OnPutRemoteDetonationBomb(InputAction.CallbackContext context);
        }
    }
}
